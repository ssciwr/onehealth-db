{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#one-health-platform","title":"One Health Platform","text":"<p>A surveillance platform displaying statistical information on mosquito-borne diseases across European regions.</p> <p>The platform includes four main components: webserver/frontend, model backend, and data lake &amp; database backend, data preprocessor.</p> <p>Further information:</p> <ul> <li>About: Information about the project, research group, and development group</li> <li>Data Lake &amp; Database: How data is preprocessed, processed and stored in the database</li> <li>Database deployment: How the complete system is deployed in development and in production</li> <li>Issues: Some notes for running the package and further issues</li> <li>Contact: Contact information of relevant groups</li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#about","title":"About","text":"<p>TBU.</p> <p>About the project and group info.</p> <p>Heidelberg Planetary Health Hub (Hei-Planet)</p> <p>Scientific Software Center (SSC)</p>"},{"location":"contact/","title":"contact","text":""},{"location":"contact/#contact","title":"Contact","text":"<p>If you have any questions or would like to contribute to the project, feel free to contact us at ssc@iwr.uni-heidelberg.de or another@email.</p>"},{"location":"datalake_database/","title":"Data Lake & Database Backend","text":""},{"location":"datalake_database/#data-lake-database-backend","title":"Data Lake &amp; Database Backend","text":""},{"location":"datalake_database/#data-model","title":"Data model","text":"<p>Downloaded and (pre)processed data is stored in the database as follows: </p>"},{"location":"datalake_database/#run-postgresql-database-with-docker","title":"Run PostgreSQL database with Docker","text":"<p>The PostgreSQL database is employed using Docker, use the following command to enable docker service: </p><pre><code>docker compose up -d\n</code></pre> Option <code>-d</code> is used to run the docker service in background.<p></p>"},{"location":"deployment/","title":"OneHealth platform deployment","text":""},{"location":"deployment/#deployment-of-the-database-api-and-frontend","title":"Deployment of the database, API and frontend","text":"<p>The system is set up using docker compose. These require adequate Github permissions/tokens for the GHCR images. There are different containers spun up using <code>docker compose</code>:</p> <ul> <li>The postgresql database. This uses the public <code>postgis/postgis:17-3.5</code> image.</li> <li>The frontend. This uses the docker image as pushed to GHCR, <code>ghcr.io/ssciwr/onehealth-map-frontend:&lt;tag&gt;</code>, where <code>&lt;tag&gt;</code> is replaced by the version number, <code>latest</code> or the branch name.</li> <li>The Python backend. This contains both the ORM for the database and API, to process requests to the database from the frontend, but also the data feeding into the database. This uses the docker image as pushed to GHCR, <code>ghcr.io/ssciwr/onehealth-db:&lt;tag&gt;</code>, where <code>&lt;tag&gt;</code> is replaced by the version number, <code>latest</code> or the branch name; or can use a locally built image. The reason to supply a locally built image would be, for example, if one where to provide a changed config for the data feeding into the database, to include more or different data.</li> </ul>"},{"location":"deployment/#development-environment","title":"Development environment","text":"<p>To bring up your development environment, add a <code>.env</code> file in the <code>onehealth-db</code> root directory, that contains the following environment variables: </p><pre><code>POSTGRES_USER=&lt;user&gt;\nPOSTGRES_PASSWORD=&lt;password&gt;\nPOSTGRES_DB=&lt;db-name&gt;\nDB_USER=&lt;user&gt;\nDB_PASSWORD=&lt;password&gt;\nDB_HOST=db\nDB_PORT=5432\nDB_URL=postgresql://&lt;user&gt;:&lt;password&gt;@db:5432/&lt;db-name&gt;\nWAIT_FOR_DB=true\nIP_ADDRESS=0.0.0.0\n</code></pre> Replace the entries <code>&lt;user&gt;</code>, <code>&lt;password&gt;</code>, and <code>&lt;db-name&gt;</code> with a username, password, and database name of your choosing. You only need to set the IP address for a server running in production (this is relevant for the Cross-Origin Resource Sharing (CORS), a security feature for handling the requests across the web).<p></p> <p>To bring the database up and feed the development data into the database, run the command </p><pre><code>docker compose up --abort-on-container-exit production-runner\n</code></pre> This will insert the testing data into the database for the development environment. After the data has been inserted, you need to run <pre><code>docker compose up api\n</code></pre> to start the frontend and API service (request handling to the database). If you are running this locally, you should be able to access the frontend through your browser at <code>127.0.0.1:80</code> or <code>localhost:80</code>.<p></p> <p>If you know what you are doing, and want to test the API directly, you can open port 8000 through changing the <code>docker-compose.yaml</code> file, exposing this port from the network by including <code>ports:</code> under the service <code>api:</code>: </p><pre><code>  ports:\n    - \"8000:8000\"\n</code></pre> Similarly you can expose the database, to test the connectivity from outside of the docker network.<p></p>"},{"location":"deployment/#alternative-minimal-container-local-development","title":"Alternative minimal container local development","text":"<p>In order to run just the database and the API, if for example you lack Github permissions to get tokens for the Dockercompose to run, you can follow this three step procedure: Here are the commands to run the OneHealth DB backend, which the frontend connects to:</p> <p>From <code>onehealth-db/</code> folder:</p>"},{"location":"deployment/#1-start-the-database-we-will-connect-to","title":"1. Start the database we will connect to:","text":"<p><code>docker run -d --name postgres\\_onehealth -p 5432:5432 -e POSTGRES\\_PASSWORD=postgres -e POSTGRES\\_DB=onehealth\\_db postgis/postgis:17-3.5</code></p>"},{"location":"deployment/#2-start-the-api-using-the-dockerfile","title":"2. Start the API using the Dockerfile:","text":"<p><code>docker run --name onehealth\\_api -p 8000:8000 --link postgres\\_onehealth:db -e IP\\_ADDRESS=1.1.1.1 -e DB\\_URL=postgresql+psycopg2://postgres:postgres@db:5432/onehealth\\_db onehealth-db</code></p>"},{"location":"deployment/#3-fill-the-api-with-mock-data-run-the-productionpy-script-to-generate-mock-data","title":"3. Fill the API with mock data - Run the \"production.py\" script to generate mock data","text":"<p><code>docker exec -it onehealth\\_api python3 /onehealth\\_db/production.py</code></p>"},{"location":"deployment/#building-the-image-locally","title":"Building the image locally","text":"<p>To build the docker image locally, i.e. for a changed database config file, execute </p><pre><code>docker build -t onehealth-backend .\n</code></pre> This will build the image locally. In the <code>docker-compose.yaml</code> file, you need to change the line <code>image: ghcr.io/ssciwr/onehealth-backend:latest</code> to use your local image. Alternatively, you can also force docker compose to rebuild the image locally by uncommenting the <code>build: ...</code> lines in the respective sections. To tag a local image with the correct name so it can be pushed to GHCR, use <pre><code>docker image tag onehealth-backend ghcr.io/ssciwr/onehealth-backend:latest\n</code></pre> This image can be pushed to GHCR (provided, you have set your <code>CR_PAT</code> key in your local environment): <pre><code>docker push ghcr.io/ssciwr/onehealth-backend:latest\n</code></pre><p></p>"},{"location":"deployment/#production-environment","title":"Production environment","text":"<p>To run the system in production, change the database configuration file to include all the data you want to ingest in the database. Then trigger a local build of the docker image (see above) and run the two docker compose commands, to build the tables locally and start the API service and frontend: </p><pre><code>docker compose up --abort-on-container-exit production-runner\ndocker compose up api\n</code></pre><p></p>"},{"location":"deployment/#troubleshooting","title":"Troubleshooting","text":"<p>Sometimes issues arise with old, leftover volumes from the database. To remove old volumes, use <code>docker compose down -v</code> or <code>docker volume prune</code> (or <code>docker system prune --force --volumes</code> to remove all old images, containers and volumes).</p> <p>The same applies for networking issues, this is usually resolved by a <code>docker compose down</code> and <code>docker compose up -d</code>.</p>"},{"location":"issues/","title":"Issues","text":""},{"location":"issues/#issues","title":"Issues","text":""},{"location":"issues/#run-testcontainers-with-local-docker-desktop","title":"Run testcontainers with local docker desktop","text":"<p>To run test supported by <code>testcontainers</code> with local docker desktop, the environment variable <code>DOCKER_HOST</code> should be set to <code>unix:///home/[user]/.docker/desktop/docker.sock</code>, where <code>[user]</code> is your user name. </p> <p>The value for <code>DOCKER_HOST</code> in CLI is still <code>unix:///var/run/docker.sock</code>.</p>"},{"location":"issues/#address-deprecationwarning-of-the-mkdocs-jupyter-plugin","title":"Address DeprecationWarning of the mkdocs-jupyter plugin","text":"<p>While using <code>mkdocs serve</code> you might get warning as:</p> <p>DeprecationWarning: Jupyter is migrating its paths to use standard platformdirs given by the platformdirs library.  To remove this warning and see the appropriate new directories, set the environment variable <code>JUPYTER_PLATFORM_DIRS=1</code> and then run <code>jupyter --paths</code>.</p> <p>To address this warning temporarily for every session:</p> bashpowershell <pre><code>export JUPYTER_PLATFORM_DIRS=1\nmkdocs serve\n</code></pre> <pre><code>$env:JUPYTER_PLATFORM_DIRS=1\nmkdocs serve\n</code></pre> <p>Or permanently by saving the variable value into your conda environment</p> <p></p><pre><code>conda activate your_env\nconda env config vars set JUPYTER_PLATFORM_DIRS=1 #(1)!\n</code></pre><p></p> <ol> <li>reactivate <code>your_env</code> would be needed</li> </ol>"},{"location":"issues/#other-issues","title":"Other issues","text":"<p>Other issues are listed here</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright \u00a9 2025 SSC</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>onehealth_db<ul> <li>main</li> <li>postgresql_database</li> <li>production</li> </ul> </li> </ul>"},{"location":"reference/main/","title":"main","text":""},{"location":"reference/main/#onehealth_dbmain-module","title":"onehealth_db.main module","text":""},{"location":"reference/main/#onehealth_db.main","title":"onehealth_db.main","text":"<p>Classes:</p> <ul> <li> <code>CartesianRequest</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>db_status</code>             \u2013              </li> <li> <code>get_cartesian</code>             \u2013              </li> <li> <code>get_nuts_data</code>             \u2013              </li> <li> <code>get_session</code>             \u2013              </li> <li> <code>lifespan</code>             \u2013              </li> <li> <code>root</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>SessionDep</code>           \u2013            </li> <li> <code>allowed_origins</code>           \u2013            </li> <li> <code>app</code>           \u2013            </li> <li> <code>db_url</code>           \u2013            </li> <li> <code>engine</code>           \u2013            </li> <li> <code>ip_address</code>           \u2013            </li> </ul>"},{"location":"reference/main/#onehealth_db.main.SessionDep","title":"SessionDep  <code>module-attribute</code>","text":"<pre><code>SessionDep = Annotated[Session, Depends(get_session)]\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.allowed_origins","title":"allowed_origins  <code>module-attribute</code>","text":"<pre><code>allowed_origins = [\n    f\"http://{ip_address}\",\n    \"http://localhost\",\n    \"http://127.0.0.1\",\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n]\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.app","title":"app  <code>module-attribute</code>","text":"<pre><code>app = FastAPI(lifespan=lifespan)\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.db_url","title":"db_url  <code>module-attribute</code>","text":"<pre><code>db_url = get('DB_URL')\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.engine","title":"engine  <code>module-attribute</code>","text":"<pre><code>engine = create_engine(db_url)\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.ip_address","title":"ip_address  <code>module-attribute</code>","text":"<pre><code>ip_address = get('IP_ADDRESS')\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.CartesianRequest","title":"CartesianRequest","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attributes:</p> <ul> <li> <code>requested_area</code>               (<code>tuple[float, float, float, float] | None</code>)           \u2013            </li> <li> <code>requested_time_point</code>               (<code>date</code>)           \u2013            </li> <li> <code>requested_variable_type</code>               (<code>str | None</code>)           \u2013            </li> </ul>"},{"location":"reference/main/#onehealth_db.main.CartesianRequest.requested_area","title":"requested_area  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requested_area = None\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.CartesianRequest.requested_time_point","title":"requested_time_point  <code>instance-attribute</code>","text":"<pre><code>requested_time_point\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.CartesianRequest.requested_variable_type","title":"requested_variable_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>requested_variable_type = None\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.db_status","title":"db_status","text":"<pre><code>db_status()\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.get_cartesian","title":"get_cartesian","text":"<pre><code>get_cartesian(session, request)\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.get_nuts_data","title":"get_nuts_data","text":"<pre><code>get_nuts_data(\n    session,\n    requested_time_point,\n    requested_variable_type,\n    requested_grid_resolution,\n)\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.get_session","title":"get_session","text":"<pre><code>get_session()\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.lifespan","title":"lifespan  <code>async</code>","text":"<pre><code>lifespan(app)\n</code></pre>"},{"location":"reference/main/#onehealth_db.main.root","title":"root  <code>async</code>","text":"<pre><code>root(message='Hello World')\n</code></pre>"},{"location":"reference/postgresql_database/","title":"postgresql_database","text":""},{"location":"reference/postgresql_database/#onehealth_dbpostgresql_database-module","title":"onehealth_db.postgresql_database module","text":""},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database","title":"onehealth_db.postgresql_database","text":"<p>Classes:</p> <ul> <li> <code>Base</code>           \u2013            <p>Base class for all models in the database.</p> </li> <li> <code>GridPoint</code>           \u2013            <p>Grid point table for storing latitude and longitude coordinates.</p> </li> <li> <code>NutsDef</code>           \u2013            <p>NUTS definition table.</p> </li> <li> <code>TimePoint</code>           \u2013            <p>Time point table for storing year, month, and day.</p> </li> <li> <code>VarType</code>           \u2013            <p>Variable type table for storing variable metadata.</p> </li> <li> <code>VarValue</code>           \u2013            <p>Variable value table for storing variable values at specific</p> </li> <li> <code>VarValueNuts</code>           \u2013            <p>Variable value table for storing variable values at specific</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>add_data_list</code>             \u2013              <p>Add a list of data instances to the database.</p> </li> <li> <code>add_data_list_bulk</code>             \u2013              <p>Add a list of data to the database in bulk.</p> </li> <li> <code>convert_yearly_to_monthly</code>             \u2013              <p>Convert yearly data to monthly data.</p> </li> <li> <code>create_or_replace_tables</code>             \u2013              <p>Create or replace tables in the database.</p> </li> <li> <code>create_session</code>             \u2013              <p>Create a new session for the database.</p> </li> <li> <code>create_tables</code>             \u2013              <p>Create all tables in the database.</p> </li> <li> <code>extract_time_point</code>             \u2013              <p>Extract year, month, and day from a numpy datetime64 object.</p> </li> <li> <code>filter_nuts_ids_for_resolution</code>             \u2013              <p>Filter NUTS IDs based on the specified resolution.</p> </li> <li> <code>get_grid_ids_in_nuts</code>             \u2013              <p>Get grid point IDs that are within the NUTS regions.</p> </li> <li> <code>get_grid_points</code>             \u2013              <p>Get grid points from the database that fall within a specified area.</p> </li> <li> <code>get_id_maps</code>             \u2013              <p>Get ID maps for grid points, time points, and variable types.</p> </li> <li> <code>get_nuts_regions</code>             \u2013              <p>Get NUTS regions from the database.</p> </li> <li> <code>get_time_points</code>             \u2013              <p>Get time points from the database that fall within a specified range.</p> </li> <li> <code>get_unique_time_points</code>             \u2013              <p>Get the unique of time points.</p> </li> <li> <code>get_var_types</code>             \u2013              <p>Get variable types from the database with names specified in a list.</p> </li> <li> <code>get_var_value</code>             \u2013              <p>Get variable value from the database.</p> </li> <li> <code>get_var_value_nuts</code>             \u2013              <p>Get variable value from the database.</p> </li> <li> <code>get_var_values_cartesian</code>             \u2013              <p>Get variable values for a cartesian map.</p> </li> <li> <code>get_var_values_cartesian_for_download</code>             \u2013              <p>Get variable values for a cartesian map.</p> </li> <li> <code>get_var_values_nuts</code>             \u2013              <p>Get variable values for all two-digit NUTS regions.</p> </li> <li> <code>initialize_database</code>             \u2013              <p>Initialize the database by creating the engine and tables, and installing PostGIS.</p> </li> <li> <code>insert_grid_points</code>             \u2013              <p>Insert grid points into the database.</p> </li> <li> <code>insert_nuts_def</code>             \u2013              <p>Insert NUTS definition data into the database.</p> </li> <li> <code>insert_time_points</code>             \u2013              <p>Insert time points into the database.</p> </li> <li> <code>insert_var_types</code>             \u2013              <p>Insert variable types into the database.</p> </li> <li> <code>insert_var_value_nuts</code>             \u2013              <p>Insert variable values for NUTS regions into the database.</p> </li> <li> <code>insert_var_values</code>             \u2013              <p>Insert variable values into the database.</p> </li> <li> <code>install_postgis</code>             \u2013              <p>Install PostGIS extension on the database.</p> </li> <li> <code>sort_grid_points_get_ids</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>BATCH_SIZE</code>           \u2013            </li> <li> <code>CRS</code>           \u2013            </li> <li> <code>MAX_WORKERS</code>           \u2013            </li> <li> <code>STR_POINT</code>           \u2013            </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.BATCH_SIZE","title":"BATCH_SIZE  <code>module-attribute</code>","text":"<pre><code>BATCH_SIZE = 10000\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.CRS","title":"CRS  <code>module-attribute</code>","text":"<pre><code>CRS = 4326\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.MAX_WORKERS","title":"MAX_WORKERS  <code>module-attribute</code>","text":"<pre><code>MAX_WORKERS = 4\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.STR_POINT","title":"STR_POINT  <code>module-attribute</code>","text":"<pre><code>STR_POINT = 'SRID={};POINT({} {})'\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.Base","title":"Base","text":"<p>               Bases: <code>DeclarativeBase</code></p> <p>Base class for all models in the database.</p>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.GridPoint","title":"GridPoint","text":"<pre><code>GridPoint(latitude, longitude, **kw)\n</code></pre> <p>               Bases: <code>Base</code></p> <p>Grid point table for storing latitude and longitude coordinates.</p> <p>Attributes:</p> <ul> <li> <code>__table_args__</code>           \u2013            </li> <li> <code>__tablename__</code>           \u2013            </li> <li> <code>id</code>               (<code>Mapped[int]</code>)           \u2013            </li> <li> <code>latitude</code>               (<code>Mapped[float]</code>)           \u2013            </li> <li> <code>longitude</code>               (<code>Mapped[float]</code>)           \u2013            </li> <li> <code>point</code>               (<code>Mapped[Geometry]</code>)           \u2013            </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.GridPoint.__table_args__","title":"__table_args__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__table_args__ = (\n    Index(\n        \"idx_point_gridpoint\",\n        \"point\",\n        postgresql_using=\"gist\",\n    ),\n    UniqueConstraint(\n        \"latitude\", \"longitude\", name=\"uq_lat_lon\"\n    ),\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.GridPoint.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'grid_point'\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.GridPoint.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = mapped_column(\n    Integer(), primary_key=True, autoincrement=True\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.GridPoint.latitude","title":"latitude  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>latitude = latitude\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.GridPoint.longitude","title":"longitude  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>longitude = longitude\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.GridPoint.point","title":"point  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>point = ST_GeomFromText(\n    format(str(CRS), longitude, latitude)\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.NutsDef","title":"NutsDef","text":"<p>               Bases: <code>Base</code></p> <p>NUTS definition table.</p> <p>Attributes:</p> <ul> <li> <code>__tablename__</code>           \u2013            </li> <li> <code>cntr_code</code>               (<code>Mapped[String]</code>)           \u2013            </li> <li> <code>coast_type</code>               (<code>Mapped[Float]</code>)           \u2013            </li> <li> <code>geometry</code>               (<code>Mapped[WKBElement]</code>)           \u2013            </li> <li> <code>levl_code</code>               (<code>Mapped[int]</code>)           \u2013            </li> <li> <code>mount_type</code>               (<code>Mapped[Float]</code>)           \u2013            </li> <li> <code>name_latn</code>               (<code>Mapped[String]</code>)           \u2013            </li> <li> <code>nuts_id</code>               (<code>Mapped[String]</code>)           \u2013            </li> <li> <code>nuts_name</code>               (<code>Mapped[String]</code>)           \u2013            </li> <li> <code>urbn_type</code>               (<code>Mapped[Float]</code>)           \u2013            </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.NutsDef.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'nuts_def'\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.NutsDef.cntr_code","title":"cntr_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cntr_code = mapped_column(String(), nullable=True)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.NutsDef.coast_type","title":"coast_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>coast_type = mapped_column(Float(), nullable=True)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.NutsDef.geometry","title":"geometry  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>geometry = mapped_column(\n    Geometry(geometry_type=\"MULTIPOLYGON\", srid=CRS)\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.NutsDef.levl_code","title":"levl_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>levl_code = mapped_column(Integer(), nullable=True)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.NutsDef.mount_type","title":"mount_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mount_type = mapped_column(Float(), nullable=True)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.NutsDef.name_latn","title":"name_latn  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name_latn = mapped_column(String(), nullable=True)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.NutsDef.nuts_id","title":"nuts_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>nuts_id = mapped_column(String(), primary_key=True)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.NutsDef.nuts_name","title":"nuts_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>nuts_name = mapped_column(String(), nullable=True)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.NutsDef.urbn_type","title":"urbn_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>urbn_type = mapped_column(Float(), nullable=True)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.TimePoint","title":"TimePoint","text":"<p>               Bases: <code>Base</code></p> <p>Time point table for storing year, month, and day.</p> <p>Attributes:</p> <ul> <li> <code>__table_args__</code>           \u2013            </li> <li> <code>__tablename__</code>           \u2013            </li> <li> <code>day</code>               (<code>Mapped[int]</code>)           \u2013            </li> <li> <code>id</code>               (<code>Mapped[int]</code>)           \u2013            </li> <li> <code>month</code>               (<code>Mapped[int]</code>)           \u2013            </li> <li> <code>year</code>               (<code>Mapped[int]</code>)           \u2013            </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.TimePoint.__table_args__","title":"__table_args__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__table_args__ = (\n    UniqueConstraint(\n        \"year\", \"month\", \"day\", name=\"uq_year_month_day\"\n    ),\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.TimePoint.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'time_point'\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.TimePoint.day","title":"day  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>day = mapped_column(Integer())\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.TimePoint.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = mapped_column(\n    Integer(), primary_key=True, autoincrement=True\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.TimePoint.month","title":"month  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month = mapped_column(Integer())\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.TimePoint.year","title":"year  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>year = mapped_column(Integer())\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarType","title":"VarType","text":"<p>               Bases: <code>Base</code></p> <p>Variable type table for storing variable metadata.</p> <p>Attributes:</p> <ul> <li> <code>__table_args__</code>           \u2013            </li> <li> <code>__tablename__</code>           \u2013            </li> <li> <code>description</code>               (<code>Mapped[String]</code>)           \u2013            </li> <li> <code>id</code>               (<code>Mapped[int]</code>)           \u2013            </li> <li> <code>name</code>               (<code>Mapped[String]</code>)           \u2013            </li> <li> <code>unit</code>               (<code>Mapped[String]</code>)           \u2013            </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarType.__table_args__","title":"__table_args__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__table_args__ = (\n    UniqueConstraint(\"name\", name=\"uq_var_name\"),\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarType.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'var_type'\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarType.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description = mapped_column(String(), nullable=True)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarType.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = mapped_column(\n    Integer(), primary_key=True, autoincrement=True\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarType.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = mapped_column(String())\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarType.unit","title":"unit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unit = mapped_column(String())\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValue","title":"VarValue","text":"<p>               Bases: <code>Base</code></p> <p>Variable value table for storing variable values at specific grid points and time points.</p> <p>Attributes:</p> <ul> <li> <code>__table_args__</code>           \u2013            </li> <li> <code>__tablename__</code>           \u2013            </li> <li> <code>grid_id</code>               (<code>Mapped[int]</code>)           \u2013            </li> <li> <code>id</code>               (<code>Mapped[int]</code>)           \u2013            </li> <li> <code>time_id</code>               (<code>Mapped[int]</code>)           \u2013            </li> <li> <code>value</code>               (<code>Mapped[float]</code>)           \u2013            </li> <li> <code>var_id</code>               (<code>Mapped[int]</code>)           \u2013            </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValue.__table_args__","title":"__table_args__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__table_args__ = (\n    UniqueConstraint(\n        \"time_id\",\n        \"grid_id\",\n        \"var_id\",\n        name=\"uq_time_grid_var\",\n    ),\n    ForeignKeyConstraint(\n        [\"grid_id\"],\n        [\"grid_point.id\"],\n        name=\"fk_grid_id\",\n        ondelete=\"CASCADE\",\n    ),\n    ForeignKeyConstraint(\n        [\"time_id\"],\n        [\"time_point.id\"],\n        name=\"fk_time_id\",\n        ondelete=\"CASCADE\",\n    ),\n    ForeignKeyConstraint(\n        [\"var_id\"],\n        [\"var_type.id\"],\n        name=\"fk_var_id\",\n        ondelete=\"CASCADE\",\n    ),\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValue.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'var_value'\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValue.grid_id","title":"grid_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>grid_id = mapped_column(\n    Integer(), ForeignKey(\"grid_point.id\")\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValue.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = mapped_column(\n    BigInteger(), primary_key=True, autoincrement=True\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValue.time_id","title":"time_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>time_id = mapped_column(\n    Integer(), ForeignKey(\"time_point.id\")\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValue.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value = mapped_column(Float())\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValue.var_id","title":"var_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>var_id = mapped_column(Integer(), ForeignKey(\"var_type.id\"))\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValueNuts","title":"VarValueNuts","text":"<p>               Bases: <code>Base</code></p> <p>Variable value table for storing variable values at specific NUTS regions and time points.</p> <p>Attributes:</p> <ul> <li> <code>__table_args__</code>           \u2013            </li> <li> <code>__tablename__</code>           \u2013            </li> <li> <code>id</code>               (<code>Mapped[int]</code>)           \u2013            </li> <li> <code>nuts_id</code>               (<code>Mapped[String]</code>)           \u2013            </li> <li> <code>time_id</code>               (<code>Mapped[int]</code>)           \u2013            </li> <li> <code>value</code>               (<code>Mapped[float]</code>)           \u2013            </li> <li> <code>var_id</code>               (<code>Mapped[int]</code>)           \u2013            </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValueNuts.__table_args__","title":"__table_args__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__table_args__ = (\n    UniqueConstraint(\n        \"time_id\",\n        \"nuts_id\",\n        \"var_id\",\n        name=\"uq_time_nuts_var\",\n    ),\n    ForeignKeyConstraint(\n        [\"nuts_id\"],\n        [\"nuts_def.nuts_id\"],\n        name=\"fk_nuts_id\",\n        ondelete=\"CASCADE\",\n    ),\n    ForeignKeyConstraint(\n        [\"time_id\"],\n        [\"time_point.id\"],\n        name=\"fk_time_id_nuts\",\n        ondelete=\"CASCADE\",\n    ),\n    ForeignKeyConstraint(\n        [\"var_id\"],\n        [\"var_type.id\"],\n        name=\"fk_var_id_nuts\",\n        ondelete=\"CASCADE\",\n    ),\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValueNuts.__tablename__","title":"__tablename__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__tablename__ = 'var_value_nuts'\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValueNuts.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id = mapped_column(\n    BigInteger(), primary_key=True, autoincrement=True\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValueNuts.nuts_id","title":"nuts_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>nuts_id = mapped_column(\n    String(), ForeignKey(\"nuts_def.nuts_id\")\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValueNuts.time_id","title":"time_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>time_id = mapped_column(\n    Integer(), ForeignKey(\"time_point.id\")\n)\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValueNuts.value","title":"value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>value = mapped_column(Float())\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.VarValueNuts.var_id","title":"var_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>var_id = mapped_column(Integer(), ForeignKey(\"var_type.id\"))\n</code></pre>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.add_data_list","title":"add_data_list","text":"<pre><code>add_data_list(session, data_list)\n</code></pre> <p>Add a list of data instances to the database.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> <li> <code>data_list</code>               (<code>list</code>)           \u2013            <p>List of data instances to add.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.add_data_list_bulk","title":"add_data_list_bulk","text":"<pre><code>add_data_list_bulk(session, data_dict_list, class_type)\n</code></pre> <p>Add a list of data to the database in bulk.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> <li> <code>data_dict_list</code>               (<code>list</code>)           \u2013            <p>List of dictionaries containing data to insert.</p> </li> <li> <code>class_type</code>               (<code>Type[Base]</code>)           \u2013            <p>SQLAlchemy mapped class to insert data into.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.convert_yearly_to_monthly","title":"convert_yearly_to_monthly","text":"<pre><code>convert_yearly_to_monthly(ds)\n</code></pre> <p>Convert yearly data to monthly data.</p> <p>Parameters:</p> <ul> <li> <code>ds</code>               (<code>Dataset</code>)           \u2013            <p>xarray dataset with yearly data.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dataset</code>           \u2013            <p>xr.Dataset: xarray dataset with monthly data.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.create_or_replace_tables","title":"create_or_replace_tables","text":"<pre><code>create_or_replace_tables(engine)\n</code></pre> <p>Create or replace tables in the database.</p> <p>Parameters:</p> <ul> <li> <code>engine</code>               (<code>Engine</code>)           \u2013            <p>SQLAlchemy engine object.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.create_session","title":"create_session","text":"<pre><code>create_session(engine)\n</code></pre> <p>Create a new session for the database.</p> <p>Parameters:</p> <ul> <li> <code>engine</code>               (<code>Engine</code>)           \u2013            <p>SQLAlchemy engine object.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Session</code> (              <code>Session</code> )          \u2013            <p>SQLAlchemy session object.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.create_tables","title":"create_tables","text":"<pre><code>create_tables(engine)\n</code></pre> <p>Create all tables in the database.</p> <p>Parameters:</p> <ul> <li> <code>engine</code>               (<code>Engine</code>)           \u2013            <p>SQLAlchemy engine object.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.extract_time_point","title":"extract_time_point","text":"<pre><code>extract_time_point(time_point)\n</code></pre> <p>Extract year, month, and day from a numpy datetime64 object.</p> <p>Parameters:</p> <ul> <li> <code>time_point</code>               (<code>datetime64</code>)           \u2013            <p>Numpy datetime64 object representing a time point.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple</code> (              <code>tuple[int, int, int, int, int, int]</code> )          \u2013            <p>A tuple containing year, month, day, hour, minute, second.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.filter_nuts_ids_for_resolution","title":"filter_nuts_ids_for_resolution","text":"<pre><code>filter_nuts_ids_for_resolution(nuts_ids, resolution)\n</code></pre> <p>Filter NUTS IDs based on the specified resolution.</p> <p>Parameters:</p> <ul> <li> <code>nuts_ids</code>               (<code>List[str]</code>)           \u2013            <p>List of NUTS IDs to filter.</p> </li> <li> <code>resolution</code>               (<code>str</code>)           \u2013            <p>Desired NUTS resolution (\"NUTS0\", \"NUTS1\", \"NUTS2\", \"NUTS3\").</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List[str]: Filtered list of NUTS IDs matching the specified resolution.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.get_grid_ids_in_nuts","title":"get_grid_ids_in_nuts","text":"<pre><code>get_grid_ids_in_nuts(engine, nuts_regions)\n</code></pre> <p>Get grid point IDs that are within the NUTS regions.</p> <p>Parameters:</p> <ul> <li> <code>engine</code>               (<code>Engine</code>)           \u2013            <p>SQLAlchemy engine object.</p> </li> <li> <code>nuts_regions</code>               (<code>GeoDataFrame</code>)           \u2013            <p>GeoDataFrame with NUTS region geometries.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[int]</code>           \u2013            <p>List[int]: List of grid point IDs that intersect with the NUTS regions.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.get_grid_points","title":"get_grid_points","text":"<pre><code>get_grid_points(session, area=None)\n</code></pre> <p>Get grid points from the database that fall within a specified area. Args:     session (Session): SQLAlchemy session object.     area (None | Tuple[float, float, float, float]):         Area as (North, West, South, East).         If None, all grid points are returned. Returns:     List[GridPoint]: List of GridPoint objects within the specified area.</p>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.get_id_maps","title":"get_id_maps","text":"<pre><code>get_id_maps(session)\n</code></pre> <p>Get ID maps for grid points, time points, and variable types.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple</code> (              <code>tuple[dict, dict, dict]</code> )          \u2013            <p>A tuple containing three dictionaries:</p> <ul> <li> <p>grid_id_map: Mapping of (latitude, longitude) to grid point ID.</p> </li> <li> <p>time_id_map: Mapping of datetime64 to time point ID.</p> </li> <li> <p>var_id_map: Mapping of variable name to variable type ID.</p> </li> </ul> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.get_nuts_regions","title":"get_nuts_regions","text":"<pre><code>get_nuts_regions(engine)\n</code></pre> <p>Get NUTS regions from the database.</p> <p>Parameters:</p> <ul> <li> <code>engine</code>               (<code>Engine</code>)           \u2013            <p>SQLAlchemy engine object.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>GeoDataFrame</code>           \u2013            <p>gpd.GeoDataFrame: GeoDataFrame with NUTS region attributes and geometries.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.get_time_points","title":"get_time_points","text":"<pre><code>get_time_points(\n    session, start_time_point, end_time_point=None\n)\n</code></pre> <p>Get time points from the database that fall within a specified range.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> <li> <code>start_time_point</code>               (<code>Tuple[int, int]</code>)           \u2013            <p>Start time point as (year, month).</p> </li> <li> <code>end_time_point</code>               (<code>Tuple[int, int] | None</code>, default:                   <code>None</code> )           \u2013            <p>End time point as (year, month). If None, only the start time point is used.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[TimePoint]</code>           \u2013            <p>List[TimePoint]: List of TimePoint objects within the specified range.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.get_unique_time_points","title":"get_unique_time_points","text":"<pre><code>get_unique_time_points(time_point_data)\n</code></pre> <p>Get the unique of time points.</p> <p>Parameters:</p> <ul> <li> <code>time_point_data</code>               (<code>list[Tuple[ndarray, bool]]</code>)           \u2013            <p>List of tuples containing time point data, and the yearly flag. If flag is True, the time point needs to be converted to monthly.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>np.ndarray: Unique of (sorted) time points as a numpy array.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.get_var_types","title":"get_var_types","text":"<pre><code>get_var_types(session, var_names=None)\n</code></pre> <p>Get variable types from the database with names specified in a list.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> <li> <code>var_names</code>               (<code>None | List[str]</code>, default:                   <code>None</code> )           \u2013            <p>List of variable names to filter by. If None, all variable types are returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[VarType]</code>           \u2013            <p>List[VarType]: List of VarType objects with the specified names.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.get_var_value","title":"get_var_value","text":"<pre><code>get_var_value(\n    session, var_name, lat, lon, year, month, day\n)\n</code></pre> <p>Get variable value from the database.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> <li> <code>var_name</code>               (<code>str</code>)           \u2013            <p>Name of the variable to retrieve.</p> </li> <li> <code>lat</code>               (<code>float</code>)           \u2013            <p>Latitude of the grid point.</p> </li> <li> <code>lon</code>               (<code>float</code>)           \u2013            <p>Longitude of the grid point.</p> </li> <li> <code>year</code>               (<code>int</code>)           \u2013            <p>Year of the time point.</p> </li> <li> <code>month</code>               (<code>int</code>)           \u2013            <p>Month of the time point.</p> </li> <li> <code>day</code>               (<code>int</code>)           \u2013            <p>Day of the time point.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float | int | str | None</code>           \u2013            <p>float | int | str | None: Value of the variable at the specified grid point and time point.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.get_var_value_nuts","title":"get_var_value_nuts","text":"<pre><code>get_var_value_nuts(\n    session, var_name, nuts_region, year, month, day\n)\n</code></pre> <p>Get variable value from the database.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> <li> <code>var_name</code>               (<code>str</code>)           \u2013            <p>Name of the variable to retrieve.</p> </li> <li> <code>nuts_region</code>               (<code>str</code>)           \u2013            <p>NUTS region code.</p> </li> <li> <code>year</code>               (<code>int</code>)           \u2013            <p>Year of the time point.</p> </li> <li> <code>month</code>               (<code>int</code>)           \u2013            <p>Month of the time point.</p> </li> <li> <code>day</code>               (<code>int</code>)           \u2013            <p>Day of the time point.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float | int | str | None</code>           \u2013            <p>float | int | str | None: Value of the variable at the specified grid point and time point.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.get_var_values_cartesian","title":"get_var_values_cartesian","text":"<pre><code>get_var_values_cartesian(\n    session, time_point, area=None, var_name=None\n)\n</code></pre> <p>Get variable values for a cartesian map.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> <li> <code>time_point</code>               (<code>Tuple[int, int]</code>)           \u2013            <p>Date point as (year, month).</p> </li> <li> <code>area</code>               (<code>None | Tuple[float, float, float, float]</code>, default:                   <code>None</code> )           \u2013            <p>Area as (North, West, South, East). If None, all grid points are used.</p> </li> <li> <code>var_name</code>               (<code>None | str</code>, default:                   <code>None</code> )           \u2013            <p>Variable name for which values should be returned. If None, the default model values will be returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>a dict with (latitude, longitude, var_value) for the requested date.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.get_var_values_cartesian_for_download","title":"get_var_values_cartesian_for_download","text":"<pre><code>get_var_values_cartesian_for_download(\n    session,\n    start_time_point,\n    end_time_point=None,\n    area=None,\n    var_names=None,\n    netcdf_file=\"cartesian_grid_data_onehealth.nc\",\n)\n</code></pre> <p>Get variable values for a cartesian map.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> <li> <code>start_time_point</code>               (<code>Tuple[int, int]</code>)           \u2013            <p>Start time point as (year, month).</p> </li> <li> <code>end_time_point</code>               (<code>Tuple[int, int] | None</code>, default:                   <code>None</code> )           \u2013            <p>End time point as (year, month). If None, only the start time point is used.</p> </li> <li> <code>area</code>               (<code>None | Tuple[float, float, float, float]</code>, default:                   <code>None</code> )           \u2013            <p>Area as (North, West, South, East). If None, all grid points are used.</p> </li> <li> <code>var_names</code>               (<code>None | List[str]</code>, default:                   <code>None</code> )           \u2013            <p>List of variable names to filter by. If None, all variable types are used.</p> </li> <li> <code>netcdf_file</code>               (<code>str</code>, default:                   <code>'cartesian_grid_data_onehealth.nc'</code> )           \u2013            <p>Name of the NetCDF file to save the dataset.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>a dict with (time, latitude, longitude, var_value) keys. time or var_value is empty if no data is found.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.get_var_values_nuts","title":"get_var_values_nuts","text":"<pre><code>get_var_values_nuts(\n    session,\n    time_point,\n    var_name=None,\n    grid_resolution=\"NUTS2\",\n)\n</code></pre> <p>Get variable values for all two-digit NUTS regions.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> <li> <code>time_point</code>               (<code>Tuple[int, int]</code>)           \u2013            <p>Date point as (year, month).</p> </li> <li> <code>var_name</code>               (<code>None | str</code>, default:                   <code>None</code> )           \u2013            <p>Variable name for which values should be returned. If None, the default model values will be returned.</p> </li> <li> <code>grid_resolution</code>               (<code>str</code>, default:                   <code>'NUTS2'</code> )           \u2013            <p>Grid resolution, by default \"NUTS2\" is returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>A dict with (NUTS_id: var_value) for the requested date and variable type. The NUTS id is the two-digit nuts abbreviation for the regions.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.initialize_database","title":"initialize_database","text":"<pre><code>initialize_database(db_url, replace=False)\n</code></pre> <p>Initialize the database by creating the engine and tables, and installing PostGIS. If replace is True, it will drop and recreate the tables.</p> <p>Parameters:</p> <ul> <li> <code>db_url</code>               (<code>str</code>)           \u2013            <p>Database URL for SQLAlchemy.</p> </li> <li> <code>replace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to drop and recreate the tables. Defaults to False.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.insert_grid_points","title":"insert_grid_points","text":"<pre><code>insert_grid_points(session, latitudes, longitudes)\n</code></pre> <p>Insert grid points into the database.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> <li> <code>latitudes</code>               (<code>ndarray</code>)           \u2013            <p>Array of latitudes.</p> </li> <li> <code>longitudes</code>               (<code>ndarray</code>)           \u2013            <p>Array of longitudes.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.insert_nuts_def","title":"insert_nuts_def","text":"<pre><code>insert_nuts_def(engine, shapefiles_path)\n</code></pre> <p>Insert NUTS definition data into the database. The shapefiles are downloaded from the Eurostat website. More details for downloading NUTS shapefiles can be found in our data page</p> <p>Five shapefiles are involved in the process: - <code>.shp</code>: geometry data (e.g. polygons) - <code>.shx</code>: shape index data - <code>.dbf</code>: attribute data (e.g. names, codes) - <code>.prj</code>: projection data (i.e. CRS) - <code>.cpg</code>: character encoding data</p> <p>Parameters:</p> <ul> <li> <code>engine</code>               (<code>Engine</code>)           \u2013            <p>SQLAlchemy engine object.</p> </li> <li> <code>shapefiles_path</code>               (<code>Path</code>)           \u2013            <p>Path to the NUTS shapefiles.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.insert_time_points","title":"insert_time_points","text":"<pre><code>insert_time_points(session, time_point_data)\n</code></pre> <p>Insert time points into the database.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> <li> <code>time_point_data</code>               (<code>list[ndarray, bool]</code>)           \u2013            <p>List of tuples containing time point data, and its flag. If flag is True, the time point needs to be converted to monthly.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.insert_var_types","title":"insert_var_types","text":"<pre><code>insert_var_types(session, var_types)\n</code></pre> <p>Insert variable types into the database.</p> <p>Parameters:</p> <ul> <li> <code>session</code>               (<code>Session</code>)           \u2013            <p>SQLAlchemy session object.</p> </li> <li> <code>var_types</code>               (<code>list[dict]</code>)           \u2013            <p>List of dictionaries containing variable type data.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.insert_var_value_nuts","title":"insert_var_value_nuts","text":"<pre><code>insert_var_value_nuts(\n    engine, ds, var_name, time_id_map, var_id_map\n)\n</code></pre> <p>Insert variable values for NUTS regions into the database.</p> <p>Parameters:</p> <ul> <li> <code>engine</code>               (<code>Engine</code>)           \u2013            <p>SQLAlchemy engine object.</p> </li> <li> <code>ds</code>               (<code>Dataset</code>)           \u2013            <p>xarray dataset with dimensions (time, NUTS_ID).</p> </li> <li> <code>var_name</code>               (<code>str</code>)           \u2013            <p>Name of the variable to insert.</p> </li> <li> <code>time_id_map</code>               (<code>dict</code>)           \u2013            <p>Mapping of time points to IDs.</p> </li> <li> <code>var_id_map</code>               (<code>dict</code>)           \u2013            <p>Mapping of variable names to variable type IDs.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>The time taken to insert the variable values.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.insert_var_values","title":"insert_var_values","text":"<pre><code>insert_var_values(\n    engine,\n    ds,\n    var_name,\n    grid_id_map,\n    time_id_map,\n    var_id_map,\n    to_monthly=False,\n)\n</code></pre> <p>Insert variable values into the database.</p> <p>Parameters:</p> <ul> <li> <code>engine</code>               (<code>Engine</code>)           \u2013            <p>SQLAlchemy engine object.</p> </li> <li> <code>ds</code>               (<code>Dataset</code>)           \u2013            <p>xarray dataset with variable data.</p> </li> <li> <code>var_name</code>               (<code>str</code>)           \u2013            <p>Name of the variable to insert.</p> </li> <li> <code>grid_id_map</code>               (<code>dict</code>)           \u2013            <p>Mapping of grid points to IDs.</p> </li> <li> <code>time_id_map</code>               (<code>dict</code>)           \u2013            <p>Mapping of time points to IDs.</p> </li> <li> <code>var_id_map</code>               (<code>dict</code>)           \u2013            <p>Mapping of variable types to IDs.</p> </li> <li> <code>to_monthly</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to convert yearly data to monthly data. Defaults to False.</p> </li> </ul> <p>Returns:     tuple: A tuple containing the time taken to convert yearly data to monthly data,         and the time taken to insert the variable values.</p>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.install_postgis","title":"install_postgis","text":"<pre><code>install_postgis(engine)\n</code></pre> <p>Install PostGIS extension on the database.</p> <p>Parameters:</p> <ul> <li> <code>engine</code>               (<code>Engine</code>)           \u2013            <p>SQLAlchemy engine object.</p> </li> </ul>"},{"location":"reference/postgresql_database/#onehealth_db.postgresql_database.sort_grid_points_get_ids","title":"sort_grid_points_get_ids","text":"<pre><code>sort_grid_points_get_ids(grid_points)\n</code></pre>"},{"location":"reference/production/","title":"production","text":""},{"location":"reference/production/#onehealth_dbproduction-module","title":"onehealth_db.production module","text":""},{"location":"reference/production/#onehealth_db.production","title":"onehealth_db.production","text":"<p>Functions:</p> <ul> <li> <code>check_paths</code>             \u2013              <p>Check that the paths are not None.</p> </li> <li> <code>create_directories</code>             \u2013              <p>Create directories if they do not exist.</p> </li> <li> <code>get_engine</code>             \u2013              </li> <li> <code>get_production_data</code>             \u2013              <p>Fetch data that is fed into the production database.</p> </li> <li> <code>get_var_types_from_config</code>             \u2013              <p>Get the variable types from the configuration file and</p> </li> <li> <code>insert_data</code>             \u2013              </li> <li> <code>insert_var_values</code>             \u2013              </li> <li> <code>insert_var_values_nuts</code>             \u2013              </li> <li> <code>main</code>             \u2013              <p>Main function to set up the production database and data lake.</p> </li> <li> <code>read_production_config</code>             \u2013              <p>Read configuration of the production database.</p> </li> </ul>"},{"location":"reference/production/#onehealth_db.production.check_paths","title":"check_paths","text":"<pre><code>check_paths(paths)\n</code></pre> <p>Check that the paths are not None.</p>"},{"location":"reference/production/#onehealth_db.production.create_directories","title":"create_directories","text":"<pre><code>create_directories(dir)\n</code></pre> <p>Create directories if they do not exist.</p> <p>Parameters:</p> <ul> <li> <code>dir</code>               (<code>str</code>)           \u2013            <p>String of the directory to create/use.</p> </li> </ul>"},{"location":"reference/production/#onehealth_db.production.get_engine","title":"get_engine","text":"<pre><code>get_engine()\n</code></pre>"},{"location":"reference/production/#onehealth_db.production.get_production_data","title":"get_production_data","text":"<pre><code>get_production_data(url, filename, filehash, outputdir)\n</code></pre> <p>Fetch data that is fed into the production database.</p> <p>url (str): URL to fetch the data from.     filename (str): Name of the file to be fetched.     filehash (str): SHA256SUM hash of the file to verify integrity.     outputdir (Path): Directory where the file will be saved. Returns:     completion_code (int): Status code indicating the success or         failure of the operation.</p>"},{"location":"reference/production/#onehealth_db.production.get_var_types_from_config","title":"get_var_types_from_config","text":"<pre><code>get_var_types_from_config(config)\n</code></pre> <p>Get the variable types from the configuration file and place them in a dictionary.</p>"},{"location":"reference/production/#onehealth_db.production.insert_data","title":"insert_data","text":"<pre><code>insert_data(engine, shapefiles_folder_path)\n</code></pre>"},{"location":"reference/production/#onehealth_db.production.insert_var_values","title":"insert_var_values","text":"<pre><code>insert_var_values(\n    engine, era5_land_path=None, r0_path=None\n)\n</code></pre>"},{"location":"reference/production/#onehealth_db.production.insert_var_values_nuts","title":"insert_var_values_nuts","text":"<pre><code>insert_var_values_nuts(engine, r0_nuts_path=None)\n</code></pre>"},{"location":"reference/production/#onehealth_db.production.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>Main function to set up the production database and data lake. This function reads the production configuration, creates the necessary directories, and fetches the data from the configured sources. It is intended to be run as a script.</p>"},{"location":"reference/production/#onehealth_db.production.read_production_config","title":"read_production_config","text":"<pre><code>read_production_config(dict_path=None)\n</code></pre> <p>Read configuration of the production database.</p> <p>Parameters:</p> <ul> <li> <code>dict_path</code>               (<code>str | Traversable</code>, default:                   <code>None</code> )           \u2013            <p>Path to the configuration dictionary. Defaults to None, which uses the default path.</p> </li> </ul> <p>Returns:     dict: Dict with configuration details for the         production database.</p>"},{"location":"source/notebooks/insert_data/","title":"insert_data.ipynb","text":"In\u00a0[\u00a0]: Copied! <pre>from onehealth_db import postgresql_database as db\nfrom pathlib import Path\nimport time\nimport xarray as xr\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport dotenv\n</pre> from onehealth_db import postgresql_database as db from pathlib import Path import time import xarray as xr import pandas as pd import matplotlib.pyplot as plt import os import dotenv In\u00a0[\u00a0]: Copied! <pre># PostgreSQL database URL\n# replace with your actual database URL\n# e.g. \"postgresql+psycopg2://user:password@localhost:port/mydatabase\"\n# or provide a .env file with the DB_URL variable\ndotenv.load_dotenv()\ndb_url = os.getenv(\"DB_URL\")\ndb_url = \"postgresql+psycopg2://postgres:postgres@localhost:5432/onehealth_db\"\n# initialize the database\nengine = db.initialize_database(db_url, replace=True)\n</pre> # PostgreSQL database URL # replace with your actual database URL # e.g. \"postgresql+psycopg2://user:password@localhost:port/mydatabase\" # or provide a .env file with the DB_URL variable dotenv.load_dotenv() db_url = os.getenv(\"DB_URL\") db_url = \"postgresql+psycopg2://postgres:postgres@localhost:5432/onehealth_db\" # initialize the database engine = db.initialize_database(db_url, replace=True) In\u00a0[\u00a0]: Copied! <pre># record running time\nrun_time = {}\n\n# variable types\nvar_types = [\n    {\"name\": \"t2m\", \"unit\": \"Celsius\", \"description\": \"2m temperature\"},\n    {\"name\": \"tp\", \"unit\": \"mm\", \"description\": \"Total precipitation\"},\n    {\"name\": \"total-population\", \"unit\": \"1\", \"description\": \"Total population\"},\n    {\n        \"name\": \"R0\",\n        \"unit\": \"1\",\n        \"description\": \"West Nile virus transmission suitability\",\n    },\n]\n</pre> # record running time run_time = {}  # variable types var_types = [     {\"name\": \"t2m\", \"unit\": \"Celsius\", \"description\": \"2m temperature\"},     {\"name\": \"tp\", \"unit\": \"mm\", \"description\": \"Total precipitation\"},     {\"name\": \"total-population\", \"unit\": \"1\", \"description\": \"Total population\"},     {         \"name\": \"R0\",         \"unit\": \"1\",         \"description\": \"West Nile virus transmission suitability\",     }, ] In\u00a0[\u00a0]: Copied! <pre># start recording time\nt0 = time.time()\n</pre> # start recording time t0 = time.time() In\u00a0[\u00a0]: Copied! <pre># paths to data\ndata_path = Path(\"../../../data\")\nshapefile_path = data_path / \"in\" / \"NUTS_RG_20M_2024_4326.shp.zip\"\nera5_land_path = (\n    data_path\n    / \"in\"\n    / \"era5_data_2016-2017_allm_2t_tp_monthly_unicoords_adjlon_celsius_mm_05deg_trim_ts20250923-065745_hssc-laptop01.nc\"\n)\nisimip_path = (\n    data_path\n    / \"in\"\n    / \"population_histsoc_30arcmin_annual_1901_2021_unicoords_2016-2017_ts20250923-065749_hssc-laptop01.nc\"\n)\ntransmission_suitability_WNV_path = (\n    data_path / \"in\" / \"output_JModel_global_ts20250925-093418_hssc-laptop01.nc\"\n)\nnuts_agg_path = (\n    data_path / \"in\" / \"NUTS_RG_20M_2024_4326_agg_era5_popu_2016-01-2017-12.nc\"\n)\nnuts_agg_path_jmodel = (\n    data_path / \"in\" / \"NUTS_RG_20M_2024_4326_agg_jmodel_2016-01-2017-12.nc\"\n)\n</pre> # paths to data data_path = Path(\"../../../data\") shapefile_path = data_path / \"in\" / \"NUTS_RG_20M_2024_4326.shp.zip\" era5_land_path = (     data_path     / \"in\"     / \"era5_data_2016-2017_allm_2t_tp_monthly_unicoords_adjlon_celsius_mm_05deg_trim_ts20250923-065745_hssc-laptop01.nc\" ) isimip_path = (     data_path     / \"in\"     / \"population_histsoc_30arcmin_annual_1901_2021_unicoords_2016-2017_ts20250923-065749_hssc-laptop01.nc\" ) transmission_suitability_WNV_path = (     data_path / \"in\" / \"output_JModel_global_ts20250925-093418_hssc-laptop01.nc\" ) nuts_agg_path = (     data_path / \"in\" / \"NUTS_RG_20M_2024_4326_agg_era5_popu_2016-01-2017-12.nc\" ) nuts_agg_path_jmodel = (     data_path / \"in\" / \"NUTS_RG_20M_2024_4326_agg_jmodel_2016-01-2017-12.nc\" ) In\u00a0[\u00a0]: Copied! <pre># add NUTS definition data\ndb.insert_nuts_def(engine, shapefile_path)\nt_nuts_def = time.time()\n</pre> # add NUTS definition data db.insert_nuts_def(engine, shapefile_path) t_nuts_def = time.time() In\u00a0[\u00a0]: Copied! <pre># add variable types\nvar_type_session = db.create_session(engine)\ndb.insert_var_types(var_type_session, var_types)\nvar_type_session.close()\nt_var_type = time.time()\n</pre> # add variable types var_type_session = db.create_session(engine) db.insert_var_types(var_type_session, var_types) var_type_session.close() t_var_type = time.time() In\u00a0[\u00a0]: Copied! <pre>era5_ds = xr.open_dataset(era5_land_path, chunks={})\nisimip_ds = xr.open_dataset(isimip_path, chunks={})\nR0_ds = xr.open_dataset(transmission_suitability_WNV_path, chunks={})\n\n# rechunk the dataset\n\nera5_ds = era5_ds.chunk({\"time\": 1, \"latitude\": 180, \"longitude\": 360})\nisimip_ds = isimip_ds.chunk({\"time\": 1, \"latitude\": 180, \"longitude\": 360})\nR0_ds = R0_ds.chunk({\"time\": 1, \"latitude\": 180, \"longitude\": 360})\n\n# add grid points\ngrid_point_session = db.create_session(engine)\ndb.insert_grid_points(\n    grid_point_session,\n    latitudes=era5_ds.latitude.to_numpy(),\n    longitudes=era5_ds.longitude.to_numpy(),\n)\ngrid_point_session.close()\nt_grid_point = time.time()\n</pre> era5_ds = xr.open_dataset(era5_land_path, chunks={}) isimip_ds = xr.open_dataset(isimip_path, chunks={}) R0_ds = xr.open_dataset(transmission_suitability_WNV_path, chunks={})  # rechunk the dataset  era5_ds = era5_ds.chunk({\"time\": 1, \"latitude\": 180, \"longitude\": 360}) isimip_ds = isimip_ds.chunk({\"time\": 1, \"latitude\": 180, \"longitude\": 360}) R0_ds = R0_ds.chunk({\"time\": 1, \"latitude\": 180, \"longitude\": 360})  # add grid points grid_point_session = db.create_session(engine) db.insert_grid_points(     grid_point_session,     latitudes=era5_ds.latitude.to_numpy(),     longitudes=era5_ds.longitude.to_numpy(), ) grid_point_session.close() t_grid_point = time.time() In\u00a0[\u00a0]: Copied! <pre># add time points\ntime_point_session = db.create_session(engine)\ndb.insert_time_points(\n    time_point_session,\n    time_point_data=[\n        (era5_ds.time.to_numpy(), False),\n        (isimip_ds.time.to_numpy(), True),\n    ],\n)  # True means yearly data\ntime_point_session.close()\nt_time_point = time.time()\n</pre> # add time points time_point_session = db.create_session(engine) db.insert_time_points(     time_point_session,     time_point_data=[         (era5_ds.time.to_numpy(), False),         (isimip_ds.time.to_numpy(), True),     ], )  # True means yearly data time_point_session.close() t_time_point = time.time() In\u00a0[\u00a0]: Copied! <pre># get id maps for grid, time, and variable types\nid_map_session = db.create_session(engine)\ngrid_id_map, time_id_map, var_type_id_map = db.get_id_maps(id_map_session)\nid_map_session.close()\nt_get_id_map = time.time()\n</pre> # get id maps for grid, time, and variable types id_map_session = db.create_session(engine) grid_id_map, time_id_map, var_type_id_map = db.get_id_maps(id_map_session) id_map_session.close() t_get_id_map = time.time() In\u00a0[\u00a0]: Copied! <pre># add t2m values\n_, t_start_insert_t2m = db.insert_var_values(\n    engine, era5_ds, \"t2m\", grid_id_map, time_id_map, var_type_id_map\n)\nt_inserted_t2m = time.time()\n</pre> # add t2m values _, t_start_insert_t2m = db.insert_var_values(     engine, era5_ds, \"t2m\", grid_id_map, time_id_map, var_type_id_map ) t_inserted_t2m = time.time() In\u00a0[\u00a0]: Copied! <pre># add total precipitation values\n_, t_start_insert_tp = db.insert_var_values(\n    engine, era5_ds, \"tp\", grid_id_map, time_id_map, var_type_id_map\n)\nt_inserted_tp = time.time()\n</pre> # add total precipitation values _, t_start_insert_tp = db.insert_var_values(     engine, era5_ds, \"tp\", grid_id_map, time_id_map, var_type_id_map ) t_inserted_tp = time.time() In\u00a0[\u00a0]: Copied! <pre># add population data\nt_yearly_to_monthly, t_start_insert_popu = db.insert_var_values(\n    engine,\n    isimip_ds,\n    \"total-population\",\n    grid_id_map,\n    time_id_map,\n    var_type_id_map,\n    to_monthly=False,\n)\nt_inserted_popu = time.time()\n</pre> # add population data t_yearly_to_monthly, t_start_insert_popu = db.insert_var_values(     engine,     isimip_ds,     \"total-population\",     grid_id_map,     time_id_map,     var_type_id_map,     to_monthly=False, ) t_inserted_popu = time.time() In\u00a0[\u00a0]: Copied! <pre># add R0 values\n_, t_start_insert_R0 = db.insert_var_values(\n    engine, R0_ds, \"R0\", grid_id_map, time_id_map, var_type_id_map\n)\nt_inserted_R0 = time.time()\n</pre> # add R0 values _, t_start_insert_R0 = db.insert_var_values(     engine, R0_ds, \"R0\", grid_id_map, time_id_map, var_type_id_map ) t_inserted_R0 = time.time() In\u00a0[\u00a0]: Copied! <pre># handle aggregated data\nnuts_agg_ds = xr.open_dataset(nuts_agg_path, chunks={})\nnuts_agg_ds = nuts_agg_ds.chunk({\"time\": 1})\n</pre> # handle aggregated data nuts_agg_ds = xr.open_dataset(nuts_agg_path, chunks={}) nuts_agg_ds = nuts_agg_ds.chunk({\"time\": 1}) In\u00a0[\u00a0]: Copied! <pre># handle aggregated data models\nnuts_agg_ds_jmodel = xr.open_dataset(nuts_agg_path_jmodel, chunks={})\nnuts_agg_ds_jmodel = nuts_agg_ds_jmodel.chunk({\"time\": 1})\n</pre> # handle aggregated data models nuts_agg_ds_jmodel = xr.open_dataset(nuts_agg_path_jmodel, chunks={}) nuts_agg_ds_jmodel = nuts_agg_ds_jmodel.chunk({\"time\": 1}) In\u00a0[\u00a0]: Copied! <pre># add aggregated t2m values\nt_start_insert_agg_t2m = db.insert_var_value_nuts(\n    engine,\n    nuts_agg_ds,\n    var_name=\"t2m\",\n    time_id_map=time_id_map,\n    var_id_map=var_type_id_map,\n)\nt_inserted_agg_t2m = time.time()\n</pre> # add aggregated t2m values t_start_insert_agg_t2m = db.insert_var_value_nuts(     engine,     nuts_agg_ds,     var_name=\"t2m\",     time_id_map=time_id_map,     var_id_map=var_type_id_map, ) t_inserted_agg_t2m = time.time() In\u00a0[\u00a0]: Copied! <pre># add aggregated total precipitation values\nt_start_insert_agg_tp = db.insert_var_value_nuts(\n    engine,\n    nuts_agg_ds,\n    var_name=\"tp\",\n    time_id_map=time_id_map,\n    var_id_map=var_type_id_map,\n)\nt_inserted_agg_tp = time.time()\n</pre> # add aggregated total precipitation values t_start_insert_agg_tp = db.insert_var_value_nuts(     engine,     nuts_agg_ds,     var_name=\"tp\",     time_id_map=time_id_map,     var_id_map=var_type_id_map, ) t_inserted_agg_tp = time.time() In\u00a0[\u00a0]: Copied! <pre># add aggregated jmodel values\nt_start_insert_agg_R0 = db.insert_var_value_nuts(\n    engine,\n    nuts_agg_ds_jmodel,\n    var_name=\"R0\",\n    time_id_map=time_id_map,\n    var_id_map=var_type_id_map,\n)\nt_inserted_agg_R0 = time.time()\n</pre> # add aggregated jmodel values t_start_insert_agg_R0 = db.insert_var_value_nuts(     engine,     nuts_agg_ds_jmodel,     var_name=\"R0\",     time_id_map=time_id_map,     var_id_map=var_type_id_map, ) t_inserted_agg_R0 = time.time() In\u00a0[\u00a0]: Copied! <pre># add aggregated population values\nt_start_insert_agg_popu = db.insert_var_value_nuts(\n    engine,\n    nuts_agg_ds,\n    var_name=\"total-population\",\n    time_id_map=time_id_map,\n    var_id_map=var_type_id_map,\n)\nt_inserted_agg_popu = time.time()\n</pre> # add aggregated population values t_start_insert_agg_popu = db.insert_var_value_nuts(     engine,     nuts_agg_ds,     var_name=\"total-population\",     time_id_map=time_id_map,     var_id_map=var_type_id_map, ) t_inserted_agg_popu = time.time() In\u00a0[\u00a0]: Copied! <pre>t_end = time.time()\n</pre> t_end = time.time() In\u00a0[\u00a0]: Copied! <pre># calculate execution time\nrun_time[\"nuts_def\"] = t_nuts_def - t0\nrun_time[\"var_type\"] = t_var_type - t_nuts_def\nrun_time[\"grid_point\"] = t_grid_point - t_var_type\nrun_time[\"time_point\"] = t_time_point - t_grid_point\nrun_time[\"get_id_map\"] = t_get_id_map - t_time_point\nrun_time[\"prepare_insert_t2m\"] = t_start_insert_t2m - t_get_id_map\nrun_time[\"inserted_t2m\"] = t_inserted_t2m - t_start_insert_t2m\nrun_time[\"prepare_insert_tp\"] = t_start_insert_tp - t_inserted_t2m\nrun_time[\"inserted_tp\"] = t_inserted_tp - t_start_insert_tp\nrun_time[\"popu_yearly_to_monthly\"] = t_yearly_to_monthly - t_inserted_tp\nrun_time[\"prepare_insert_popu\"] = t_start_insert_popu - t_yearly_to_monthly\nrun_time[\"inserted_popu\"] = t_inserted_popu - t_start_insert_popu\nrun_time[\"prepare_insert_R0\"] = t_start_insert_R0 - t_inserted_R0\nrun_time[\"inserted_R0\"] = t_inserted_R0 - t_start_insert_R0\nrun_time[\"prepare_insert_agg_t2m\"] = t_start_insert_agg_t2m - t_inserted_R0\nrun_time[\"inserted_agg_t2m\"] = t_inserted_agg_t2m - t_start_insert_agg_t2m\nrun_time[\"prepare_insert_agg_tp\"] = t_start_insert_agg_tp - t_inserted_agg_t2m\nrun_time[\"inserted_agg_tp\"] = t_inserted_agg_tp - t_start_insert_agg_tp\nrun_time[\"prepare_insert_agg_popu\"] = t_start_insert_agg_popu - t_inserted_agg_tp\nrun_time[\"inserted_agg_jmodel\"] = t_inserted_agg_R0 - t_start_insert_agg_R0\nrun_time[\"inserted_agg_popu\"] = t_inserted_agg_popu - t_start_insert_agg_popu\ntotal_time = t_end - t0\n</pre> # calculate execution time run_time[\"nuts_def\"] = t_nuts_def - t0 run_time[\"var_type\"] = t_var_type - t_nuts_def run_time[\"grid_point\"] = t_grid_point - t_var_type run_time[\"time_point\"] = t_time_point - t_grid_point run_time[\"get_id_map\"] = t_get_id_map - t_time_point run_time[\"prepare_insert_t2m\"] = t_start_insert_t2m - t_get_id_map run_time[\"inserted_t2m\"] = t_inserted_t2m - t_start_insert_t2m run_time[\"prepare_insert_tp\"] = t_start_insert_tp - t_inserted_t2m run_time[\"inserted_tp\"] = t_inserted_tp - t_start_insert_tp run_time[\"popu_yearly_to_monthly\"] = t_yearly_to_monthly - t_inserted_tp run_time[\"prepare_insert_popu\"] = t_start_insert_popu - t_yearly_to_monthly run_time[\"inserted_popu\"] = t_inserted_popu - t_start_insert_popu run_time[\"prepare_insert_R0\"] = t_start_insert_R0 - t_inserted_R0 run_time[\"inserted_R0\"] = t_inserted_R0 - t_start_insert_R0 run_time[\"prepare_insert_agg_t2m\"] = t_start_insert_agg_t2m - t_inserted_R0 run_time[\"inserted_agg_t2m\"] = t_inserted_agg_t2m - t_start_insert_agg_t2m run_time[\"prepare_insert_agg_tp\"] = t_start_insert_agg_tp - t_inserted_agg_t2m run_time[\"inserted_agg_tp\"] = t_inserted_agg_tp - t_start_insert_agg_tp run_time[\"prepare_insert_agg_popu\"] = t_start_insert_agg_popu - t_inserted_agg_tp run_time[\"inserted_agg_jmodel\"] = t_inserted_agg_R0 - t_start_insert_agg_R0 run_time[\"inserted_agg_popu\"] = t_inserted_agg_popu - t_start_insert_agg_popu total_time = t_end - t0 In\u00a0[\u00a0]: Copied! <pre>runtime_df = pd.DataFrame(run_time, index=[0])\n# convert seconds to minutes\nruntime_df = (runtime_df / 60).round(4)\ntotal_time = round(total_time / 60, 4)\nruntime_df.to_csv(\n    data_path / \"postgres_runtime_{}.csv\".format(time.strftime(\"%Y-%m-%d\")), index=False\n)\nax = runtime_df.plot.bar()\n# Position the legend to the right of the plot\nax.legend(bbox_to_anchor=(1.05, 1), loc=\"upper left\")\nax.set_xlabel(\"Database Operations\")\nax.set_ylabel(\"Time (minutes)\")\nax.set_title(\"Database Insert Operations Runtime\")\nax.set_xticks([])\n# Adjust layout to prevent clipping\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n</pre> runtime_df = pd.DataFrame(run_time, index=[0]) # convert seconds to minutes runtime_df = (runtime_df / 60).round(4) total_time = round(total_time / 60, 4) runtime_df.to_csv(     data_path / \"postgres_runtime_{}.csv\".format(time.strftime(\"%Y-%m-%d\")), index=False ) ax = runtime_df.plot.bar() # Position the legend to the right of the plot ax.legend(bbox_to_anchor=(1.05, 1), loc=\"upper left\") ax.set_xlabel(\"Database Operations\") ax.set_ylabel(\"Time (minutes)\") ax.set_title(\"Database Insert Operations Runtime\") ax.set_xticks([]) # Adjust layout to prevent clipping plt.tight_layout()  # Show the plot plt.show() In\u00a0[\u00a0]: Copied! <pre>unit = \"minutes\"\nprint(f\"NUTS definition data inserted in {runtime_df.loc[0, 'nuts_def']} {unit}.\")\nprint(f\"Variable types inserted in {runtime_df.loc[0, 'var_type']} {unit}.\")\nprint(f\"Grid points inserted in {runtime_df.loc[0, 'grid_point']} {unit}.\")\nprint(f\"Time points inserted in {runtime_df.loc[0, 'time_point']} {unit}.\")\nprint(f\"ID maps retrieved in {runtime_df.loc[0, 'get_id_map']} {unit}.\")\nprint(\n    f\"t2m variable values prepared in {runtime_df.loc[0, 'prepare_insert_t2m']} {unit}.\"\n)\nprint(f\"t2m variable values inserted in {runtime_df.loc[0, 'inserted_t2m']} {unit}.\")\nprint(\n    f\"tp variable values prepared in {runtime_df.loc[0, 'prepare_insert_tp']} {unit}.\"\n)\nprint(f\"tp variable values inserted in {runtime_df.loc[0, 'inserted_tp']} {unit}.\")\nprint(\n    f\"Population data converted from yearly to monthly in {runtime_df.loc[0, 'popu_yearly_to_monthly']} {unit}.\"\n)\nprint(\n    f\"Population variable values prepared in {runtime_df.loc[0, 'prepare_insert_popu']} {unit}.\"\n)\nprint(\n    f\"Population variable values inserted in {runtime_df.loc[0, 'inserted_popu']} {unit}.\"\n)\nprint(\n    f\"R0 variable values prepared in {runtime_df.loc[0, 'prepare_insert_R0']} {unit}.\"\n)\nprint(f\"R0 variable values inserted in {runtime_df.loc[0, 'inserted_R0']} {unit}.\")\nprint(\n    f\"Aggregated t2m variable values prepared in {runtime_df.loc[0, 'prepare_insert_agg_t2m']} {unit}.\"\n)\nprint(\n    f\"Aggregated t2m variable values inserted in {runtime_df.loc[0, 'inserted_agg_t2m']} {unit}.\"\n)\nprint(\n    f\"Aggregated tp variable values prepared in {runtime_df.loc[0, 'prepare_insert_agg_tp']} {unit}.\"\n)\nprint(\n    f\"Aggregated tp variable values inserted in {runtime_df.loc[0, 'inserted_agg_tp']} {unit}.\"\n)\nprint(\n    f\"Aggregated population variable values prepared in {runtime_df.loc[0, 'prepare_insert_agg_popu']} {unit}.\"\n)\nprint(\n    f\"Aggregated population variable values inserted in {runtime_df.loc[0, 'inserted_agg_popu']} {unit}.\"\n)\nprint(f\"Total execution time: {total_time} {unit}.\")\n</pre> unit = \"minutes\" print(f\"NUTS definition data inserted in {runtime_df.loc[0, 'nuts_def']} {unit}.\") print(f\"Variable types inserted in {runtime_df.loc[0, 'var_type']} {unit}.\") print(f\"Grid points inserted in {runtime_df.loc[0, 'grid_point']} {unit}.\") print(f\"Time points inserted in {runtime_df.loc[0, 'time_point']} {unit}.\") print(f\"ID maps retrieved in {runtime_df.loc[0, 'get_id_map']} {unit}.\") print(     f\"t2m variable values prepared in {runtime_df.loc[0, 'prepare_insert_t2m']} {unit}.\" ) print(f\"t2m variable values inserted in {runtime_df.loc[0, 'inserted_t2m']} {unit}.\") print(     f\"tp variable values prepared in {runtime_df.loc[0, 'prepare_insert_tp']} {unit}.\" ) print(f\"tp variable values inserted in {runtime_df.loc[0, 'inserted_tp']} {unit}.\") print(     f\"Population data converted from yearly to monthly in {runtime_df.loc[0, 'popu_yearly_to_monthly']} {unit}.\" ) print(     f\"Population variable values prepared in {runtime_df.loc[0, 'prepare_insert_popu']} {unit}.\" ) print(     f\"Population variable values inserted in {runtime_df.loc[0, 'inserted_popu']} {unit}.\" ) print(     f\"R0 variable values prepared in {runtime_df.loc[0, 'prepare_insert_R0']} {unit}.\" ) print(f\"R0 variable values inserted in {runtime_df.loc[0, 'inserted_R0']} {unit}.\") print(     f\"Aggregated t2m variable values prepared in {runtime_df.loc[0, 'prepare_insert_agg_t2m']} {unit}.\" ) print(     f\"Aggregated t2m variable values inserted in {runtime_df.loc[0, 'inserted_agg_t2m']} {unit}.\" ) print(     f\"Aggregated tp variable values prepared in {runtime_df.loc[0, 'prepare_insert_agg_tp']} {unit}.\" ) print(     f\"Aggregated tp variable values inserted in {runtime_df.loc[0, 'inserted_agg_tp']} {unit}.\" ) print(     f\"Aggregated population variable values prepared in {runtime_df.loc[0, 'prepare_insert_agg_popu']} {unit}.\" ) print(     f\"Aggregated population variable values inserted in {runtime_df.loc[0, 'inserted_agg_popu']} {unit}.\" ) print(f\"Total execution time: {total_time} {unit}.\") In\u00a0[\u00a0]: Copied! <pre>from sqlalchemy import create_engine\n\n# PostgreSQL database URL\n# replace with your actual database URL\n# e.g. \"postgresql+psycopg2://user:password@localhost:port/mydatabase\"\ndb_url = os.getenv(\"DB_URL\")\ndb_url = \"postgresql+psycopg2://postgres:postgres@localhost:5432/onehealth_db\"\n# get the database engine if needed\nengine = create_engine(db_url)\n</pre> from sqlalchemy import create_engine  # PostgreSQL database URL # replace with your actual database URL # e.g. \"postgresql+psycopg2://user:password@localhost:port/mydatabase\" db_url = os.getenv(\"DB_URL\") db_url = \"postgresql+psycopg2://postgres:postgres@localhost:5432/onehealth_db\" # get the database engine if needed engine = create_engine(db_url) In\u00a0[\u00a0]: Copied! <pre>latitude = -6.25\nlongitude = 106.75\nyear = 2017\nmonth = 1\nday = 1\nvar_name = \"total-population\"\n\nt_start_retrieving = time.time()\nretrieve_session = db.create_session(engine)\nvar_value = db.get_var_value(\n    retrieve_session, var_name, latitude, longitude, year, month, day\n)\nretrieve_session.close()\nt_end_retrieving = time.time()\nprint(\n    f\"Retrieved {var_name} value: {var_value} in {t_end_retrieving - t_start_retrieving} seconds.\"\n)\n</pre> latitude = -6.25 longitude = 106.75 year = 2017 month = 1 day = 1 var_name = \"total-population\"  t_start_retrieving = time.time() retrieve_session = db.create_session(engine) var_value = db.get_var_value(     retrieve_session, var_name, latitude, longitude, year, month, day ) retrieve_session.close() t_end_retrieving = time.time() print(     f\"Retrieved {var_name} value: {var_value} in {t_end_retrieving - t_start_retrieving} seconds.\" ) In\u00a0[\u00a0]: Copied! <pre>latitude = 49.25\nlongitude = 8.75\nyear = 2016\nmonth = 2\nday = 1\nvar_name = \"t2m\"\n\nt_start_retrieving = time.time()\nretrieve_session = db.create_session(engine)\nvar_value = db.get_var_value(\n    retrieve_session, var_name, latitude, longitude, year, month, day\n)\nretrieve_session.close()\nt_end_retrieving = time.time()\nprint(\n    f\"Retrieved {var_name} value: {var_value} in {t_end_retrieving - t_start_retrieving} seconds.\"\n)\n</pre> latitude = 49.25 longitude = 8.75 year = 2016 month = 2 day = 1 var_name = \"t2m\"  t_start_retrieving = time.time() retrieve_session = db.create_session(engine) var_value = db.get_var_value(     retrieve_session, var_name, latitude, longitude, year, month, day ) retrieve_session.close() t_end_retrieving = time.time() print(     f\"Retrieved {var_name} value: {var_value} in {t_end_retrieving - t_start_retrieving} seconds.\" ) In\u00a0[\u00a0]: Copied! <pre>latitude = 49.25\nlongitude = 8.75\nyear = 2016\nmonth = 2\nday = 1\nvar_name = \"R0\"\n\nt_start_retrieving = time.time()\nretrieve_session = db.create_session(engine)\nvar_value = db.get_var_value(\n    retrieve_session, var_name, latitude, longitude, year, month, day\n)\nretrieve_session.close()\nt_end_retrieving = time.time()\nprint(\n    f\"Retrieved {var_name} value: {var_value} in {t_end_retrieving - t_start_retrieving} seconds.\"\n)\n</pre> latitude = 49.25 longitude = 8.75 year = 2016 month = 2 day = 1 var_name = \"R0\"  t_start_retrieving = time.time() retrieve_session = db.create_session(engine) var_value = db.get_var_value(     retrieve_session, var_name, latitude, longitude, year, month, day ) retrieve_session.close() t_end_retrieving = time.time() print(     f\"Retrieved {var_name} value: {var_value} in {t_end_retrieving - t_start_retrieving} seconds.\" ) <p>Retrieve NUTS data.</p> In\u00a0[\u00a0]: Copied! <pre>NUTS_ID = \"DE12\"\nyear = 2017\nmonth = 8\nday = 1\nvar_name = \"R0\"\n\nt_start_retrieving = time.time()\nretrieve_session = db.create_session(engine)\nvar_value = db.get_var_value_nuts(retrieve_session, var_name, NUTS_ID, year, month, day)\nretrieve_session.close()\nt_end_retrieving = time.time()\nprint(\n    f\"Retrieved {var_name} value: {var_value} in {t_end_retrieving - t_start_retrieving} seconds.\"\n)\n</pre> NUTS_ID = \"DE12\" year = 2017 month = 8 day = 1 var_name = \"R0\"  t_start_retrieving = time.time() retrieve_session = db.create_session(engine) var_value = db.get_var_value_nuts(retrieve_session, var_name, NUTS_ID, year, month, day) retrieve_session.close() t_end_retrieving = time.time() print(     f\"Retrieved {var_name} value: {var_value} in {t_end_retrieving - t_start_retrieving} seconds.\" ) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"source/notebooks/insert_data/#inserting-data-into-the-database-and-estimating-execution-time","title":"Inserting data into the database and estimating execution time\u00b6","text":""},{"location":"source/notebooks/insert_data/#set-up-necessary-variables","title":"Set up necessary variables\u00b6","text":""},{"location":"source/notebooks/insert_data/#add-data-into-the-database","title":"Add data into the database\u00b6","text":""},{"location":"source/notebooks/insert_data/#retrieve-data-from-database","title":"Retrieve data from database\u00b6","text":"<p>Start with lat/long data.</p>"}]}