services:

  frontend:
    image: ghcr.io/ssciwr/onehealth-map-frontend:global_map_with_month_selector
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/keys:/etc/nginx/ssl:ro # Mount the certificate directory as read-only
    logging:
      driver: "local"
      options:
        max-size: 20m
        max-file: 25
    networks:
      - heiplanet-network
  db:
    image: postgis/postgis:17-3.5
    restart: always  
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d heiplanet_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - heiplanet-network

  # FastAPI Application service (Stage 2)
  api:
    image: ghcr.io/ssciwr/heiplanet-backend:latest
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      frontend:
        condition: service_started
    environment:
      - DB_URL=${DB_URL}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - WAIT_FOR_DB=${WAIT_FOR_DB}
    volumes:
      - ./production.yaml:/heiplanet_db/production.yaml
      - ./heiplanet_db:/heiplanet_db/heiplanet_db  # For development hot reload
    command: ["api"]  # Run FastAPI server
    restart: "no"
    networks:
      - heiplanet-network
    profiles: ["api"]

  production-runner:
    image: ghcr.io/ssciwr/heiplanet-backend:latest
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_URL=${DB_URL}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - WAIT_FOR_DB=${WAIT_FOR_DB}
    volumes:
      - ./production.yaml:/heiplanet_db/production.yaml
    command: ["production"]
    restart: "no"  # Run once
    networks:
      - heiplanet-network
    profiles: ["init"]

volumes:
  postgres_data:

networks:
  heiplanet-network:
    driver: bridge